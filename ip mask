import { Directive, ElementRef, HostListener } from '@angular/core';

@Directive({
  selector: '[appIpAddressMask]'
})
export class IpAddressMaskDirective {

  private regex: RegExp = new RegExp(/^[0-9]{1,3}(\.[0-9]{1,3}){0,3}$/);
  private specialKeys: Array<string> = ['Backspace', 'Tab', 'End', 'Home', '-', 'ArrowLeft', 'ArrowRight'];

  constructor(private el: ElementRef) { }

  @HostListener('keydown', ['$event'])
  onKeyDown(event: KeyboardEvent) {
    if (this.specialKeys.indexOf(event.key) !== -1) {
      return;
    }

    const current: string = this.el.nativeElement.value;
    const next: string = current.concat(event.key);

    if (next && !String(next).match(this.regex)) {
      event.preventDefault();
    }
  }

  @HostListener('blur', ['$event'])
  onBlur(event: any) {
    const value = this.el.nativeElement.value;
    if (!this.validateIp(value)) {
      this.el.nativeElement.value = '';
    }
  }

  private validateIp(value: string): boolean {
    const parts = value.split('.');
    return parts.length === 4 && parts.every(part => Number(part) >= 0 && Number(part) <= 255);
  }
}